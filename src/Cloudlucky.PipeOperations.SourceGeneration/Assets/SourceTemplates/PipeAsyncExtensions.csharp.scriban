//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generation.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

namespace {{ root_namespace }}
{
    /// <summary>
    /// Pipe extension methods to create a execution pipeline asynchronously.
    /// </summary>
    public static class PipeAsyncExtensions
    {
    {{~ for $i in 0..times ~}}
        /// <summary>
        /// Pipe the value <paramref name="input"/> to the function <paramref name="func"/>.
        /// </summary>
        /// <typeparam name="TIn">Type of the <paramref name="input"/>.</typeparam>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <typeparam name="TParam{{ $j }}">Type of the <paramref name="param{{ $j }}"/> input.</typeparam>
            {{~ end ~}}
        {{~ end ~}}
        /// <typeparam name="TOut">Type of the <paramref name="func"/> output.</typeparam>
        /// <param name="input">The input data to pass to <paramref name="func"/>.</param>
        /// <param name="func">The function to pipe.</param>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <param name="param{{ $j }}">Extra input to pass to <paramref name="func"/>.</param>
            {{~ end ~}}
        {{~ end ~}}
        /// <returns>Returns the output of <paramref name="func"/>.</returns>
        public static Task<TOut> PipeAsync<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, TOut>(this TIn input, Func<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, Task<TOut>> func{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }} param{{ $j }}{{~ end ~}}{{~ end ~}})
            => func(input{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, param{{ $j }}{{~ end ~}}{{~ end ~}});
        
        /// <summary>
        /// Pipe the value <paramref name="input"/> to the function <paramref name="func"/>.
        /// </summary>
        /// <typeparam name="TIn">Type of the <paramref name="input"/>.</typeparam>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <typeparam name="TParam{{ $j }}">Type of the <paramref name="param{{ $j }}"/> input.</typeparam>
            {{~ end ~}}
        {{~ end ~}}
        /// <typeparam name="TOut">Type of the <paramref name="func"/> output.</typeparam>
        /// <param name="input">The input data to pass to <paramref name="func"/>.</param>
        /// <param name="func">The function to pipe.</param>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <param name="param{{ $j }}">Extra input to pass to <paramref name="func"/>.</param>
            {{~ end ~}}
        {{~ end ~}}
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Returns the output of <paramref name="func"/>.</returns>
        public static Task<TOut> PipeAsync<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, TOut>(this TIn input, Func<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, CancellationToken, Task<TOut>> func{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }} param{{ $j }}{{~ end ~}}{{~ end ~}}, CancellationToken cancellationToken)
            => func(input{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, param{{ $j }}{{~ end ~}}{{~ end ~}}, cancellationToken);

        /// <summary>
        /// Pipe the value <paramref name="input"/> to the function <paramref name="func"/>.
        /// </summary>
        /// <typeparam name="TIn">Type of the <paramref name="input"/>.</typeparam>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <typeparam name="TParam{{ $j }}">Type of the <paramref name="param{{ $j }}"/> input.</typeparam>
            {{~ end ~}}
        {{~ end ~}}
        /// <typeparam name="TOut">Type of the <paramref name="func"/> output.</typeparam>
        /// <param name="input">The input data to pass to <paramref name="func"/>.</param>
        /// <param name="func">The function to pipe.</param>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <param name="param{{ $j }}">Extra input to pass to <paramref name="func"/>.</param>
            {{~ end ~}}
        {{~ end ~}}
        /// <returns>Returns the output of <paramref name="func"/>.</returns>
        public static async Task<TOut> PipeAsync<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, TOut>(this Task<TIn> input, Func<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, Task<TOut>> func{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }} param{{ $j }}{{~ end ~}}{{~ end ~}})
            => await func(await input{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, param{{ $j }}{{~ end ~}}{{~ end ~}});

        /// <summary>
        /// Pipe the value <paramref name="input"/> to the function <paramref name="func"/>.
        /// </summary>
        /// <typeparam name="TIn">Type of the <paramref name="input"/>.</typeparam>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <typeparam name="TParam{{ $j }}">Type of the <paramref name="param{{ $j }}"/> input.</typeparam>
            {{~ end ~}}
        {{~ end ~}}
        /// <typeparam name="TOut">Type of the <paramref name="func"/> output.</typeparam>
        /// <param name="input">The input data to pass to <paramref name="func"/>.</param>
        /// <param name="func">The function to pipe.</param>
        {{~ if $i > 0 ~}}
            {{~ for $j in 1..$i ~}}
        /// <param name="param{{ $j }}">Extra input to pass to <paramref name="func"/>.</param>
            {{~ end ~}}
        {{~ end ~}}
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Returns the output of <paramref name="func"/>.</returns>
        public static async Task<TOut> PipeAsync<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, TOut>(this Task<TIn> input, Func<TIn{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }}{{~ end ~}}{{~ end ~}}, CancellationToken, Task<TOut>> func{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, TParam{{ $j }} param{{ $j }}{{~ end ~}}{{~ end ~}}, CancellationToken cancellationToken)
            => await func(await input{{~ if $i > 0 ~}}{{~ for $j in 1..$i ~}}, param{{ $j }}{{~ end ~}}{{~ end ~}}, cancellationToken);

    {{~ end ~}}
    }
}
